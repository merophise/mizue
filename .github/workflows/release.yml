name: Release
on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install python3-wheel

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version twine wheel

      - name: Determine version update and gather release notes
        id: version_update_and_release_notes
        run: |
          version_update="none"
          release_notes=""
          current_version=$(cat .bumpversion.cfg | grep current_version | sed 's/current_version = //')
          while read line; do
            echo "$line"
            if [[ $line == *"Github Action"* ]]; then
              break
            elif [[ $line == "fix!: "* || $line == "feat!: "* || $line == *"BREAKING CHANGE: "* ]]; then
              version_update="major"
              release_notes+="- **${line%%:*}**: ${line#*: }\n"
            elif [[ $line == "feat: "* && version_update != "major" ]]; then
              version_update="minor"
              release_notes+="- **${line%%:*}**: ${line#*: }\n"
            elif [[ $line == "fix: "* || $line == "docs: "* && version_update != "major" && version_update != "minor" ]]; then
              version_update="patch"
              release_notes+="- **${line%%:*}**: ${line#*: }\n"
            fi
          done < <(git log --pretty=format:"%B %an" "$current_version..HEAD")
          echo "version_update=$version_update" >> $GITHUB_ENV
          echo "release_notes=$release_notes" >> $GITHUB_ENV

      - name: Set GitHub username and email
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

      - name: Bump version without committing or tagging
        if: env.version_update != 'none'
        run: |
          bump2version --config-file .bumpversion.cfg --no-commit --no-tag ${{ env.version_update }}

      - name: Extract current version from .bumpversion.cfg file
        run: |
          current_version=$(cat .bumpversion.cfg | grep current_version | sed 's/current_version = //')
          echo "current_version=$current_version" >> $GITHUB_ENV

      - name: Build package
        if: env.version_update != 'none'
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish package to PyPI and create tag if successful, remove tag if failed
        if: env.version_update != 'none'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          if twine upload dist/*; then
            git commit -am "Bump version to $current_version"
            git tag $current_version
            git push && git push --tags
          else
            echo "Package upload failed, rolling back changes"
            git reset --hard HEAD && \
            git tag -d $current_version
            exit 1
          fi

      - name: Write release notes to file
        run: |
          printf "%s" "${{ env.release_notes }}" > release_notes.txt

      - name: Create GitHub release and upload package as asset
        if: success() && env.version_update != 'none'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release_notes.txt
          tag_name: ${{ env.current_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove release notes file after use
        run:
          rm release_notes.txt
