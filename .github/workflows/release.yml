name: Release
on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install python3-wheel

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version twine wheel

      - name: Determine version update
        id: version_update
        run: |
          version_update="patch"
          git log --pretty=format:"%B %an" | while read line; do
            if [[ $line == *"Github Action"* ]]; then
              break
            elif [[ $line == "fix!: "* || $line == "feat!: "* || $line == *"BREAKING CHANGE: "* ]]; then
              version_update="major"
              break
            elif [[ $line == "feat: "* ]]; then
              version_update="minor"
            fi
          done
          echo "version_update=$version_update" >> $GITHUB_ENV

      - name: Set GitHub username and email
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

      - name: Bump version without committing or tagging
        run: |
          bump2version --config-file .bumpversion.cfg --no-commit --no-tag ${{ env.version_update }}

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish package to PyPI and create tag if successful
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/* && \
          git commit -am "Bump version to $(cat .bumpversion.cfg | grep current_version | sed 's/current_version = //')" && \
          git tag $(cat .bumpversion.cfg | grep current_version | sed 's/current_version = //') && \
          git push && git push --tags || \
          echo "Package upload failed, rolling back changes" && \
          git reset --hard HEAD && \
          git tag -d $(cat .bumpversion.cfg | grep current_version | sed 's/current_version = //')
